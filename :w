'use strict'

const mongoose = require('mongoose')
const chai = require('chai')
const requestService = require('../services/requestService')
const expect = require('chai').expect
const spies = require('chai-spies')
const searchOrder = require('../models/SearchOrder')
const product = require('../models/Product')
let comunicationCtrl = require('../controllers/ComunicationController')
let { validate } = require('../services/validationService')

chai.use(spies)

let spyPost, url
/** mock post method */
requestService.post = (url, data) => {
  return new Promise((resolve, reject) => {
    resolve(true)
  })
}

/** mock model method */
searchOrder.findByIdAndUpdate = (id, object, obj) => {
  return new Promise((resolve, reject) => {
    resolve({})
  })
}

/** mock model method */
product.create = (object) => {
  return new Promise((resolve, reject) => {
    resolve({})
  })
}

beforeEach(() => {
// Clear the cache, this can be done in a way described in the example repo. Does not have to happen here
  delete require.cache[require.resolve('../controllers/ComunicationController')]

  // Update our reference, this needs to happen here
  comunicationCtrl = require('../controllers/ComunicationController')

  url = 'https://jsonplaceholder.typicode.com/posts'
  spyPost = chai.spy(requestService.post)
  requestService.post = spyPost
})

describe('[comunicationController.sendToExternalService]', () => {
  it('send to external service', () => {
    comunicationCtrl.sendToExternalService(url, {})
      .then(() => {
        expect(spyPost).to.be.called()
      })
      .catch(() => {})
  })
})

describe('[comunicationController.callback]', () => {
  it('callback method', () => {
    comunicationCtrl.sendToExternalService(url, {})
      .then(() => {
        expect(spyPost).to.be.called()
      })
      .catch(() => {})
  })
})
